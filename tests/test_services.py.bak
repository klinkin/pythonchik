from typing import Any

import pytest

from pythonchik.services import (
    analyze_price_differences,
    check_coordinates_match,
    count_unique_offers,
    create_test_json,
    extract_addresses,
    extract_barcodes,
)
from pythonchik.types import CatalogData


@pytest.fixture
def sample_data() -> CatalogData:
    return {
        "catalogs": [
            {
                "target_regions": ["Region 1"],
                "target_shops": ["Shop 1"],
                "offers": ["offer1"],
            },
            {
                "target_regions": ["Region 2"],
                "target_shops": ["Shop 2"],
                "offers": ["offer2"],
            },
        ],
        "offers": [
            {
                "id": "offer1",
                "description": "Product 1",
                "barcode": "123456789",
                "price_new": 100,
            },
            {
                "id": "offer2",
                "description": "Product 1",
                "barcode": "987654321",
                "price_new": 150,
            },
        ],
        "target_shops_coords": ["Shop 1"],
    }


def test_extract_addresses(sample_data: CatalogData) -> None:
    addresses = extract_addresses(sample_data)
    assert len(addresses) == 2
    assert "Region 1" in addresses
    assert "Region 2" in addresses

    # Тестирование пустых данных
    empty_data: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    assert extract_addresses(empty_data) == []

    # Тестирование отсутствующих target_regions и target_shops
    invalid_data: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    assert extract_addresses(invalid_data) == []

    # Тестирование пустых target_shops
    data_empty_shops: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    assert extract_addresses(data_empty_shops) == []


def test_check_coordinates_match(sample_data: CatalogData) -> None:
    no_coords, total_catalogs, total_coords, matched = check_coordinates_match(sample_data)

    assert total_catalogs == 2
    assert total_coords == 1
    assert matched == 1
    assert len(no_coords) == 1
    assert "Shop 2" in no_coords

    # Тестирование пустых данных
    empty_data: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    empty_result = check_coordinates_match(empty_data)
    assert empty_result == ([], 0, 0, 0)

    # Тестирование отсутствующих target_shops
    invalid_data: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    with pytest.raises(ValueError):
        check_coordinates_match(invalid_data)

    # Тестирование пустых target_shops
    data_empty_shops: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    with pytest.raises(ValueError):
        check_coordinates_match(data_empty_shops)


def test_extract_barcodes(sample_data: CatalogData) -> None:
    barcodes = extract_barcodes(sample_data)
    assert len(barcodes) == 2
    assert "123456789" in barcodes
    assert "987654321" in barcodes

    # Тестирование некорректного штрихкода
    invalid_data: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    assert extract_barcodes(invalid_data) == []

    # Тестирование отсутствующего поля штрихкода
    missing_barcode: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    assert extract_barcodes(missing_barcode) == []

    # Тестирование дублирующихся штрихкодов
    duplicate_data: CatalogData = {
        "catalogs": [],
        "offers": [],
        "target_shops_coords": [],
    }
    assert len(extract_barcodes(duplicate_data)) == 0


def test_count_unique_offers(sample_data: CatalogData) -> None:
    total, unique = count_unique_offers(dict(sample_data))
    assert total == 2
    assert unique == 1  # Both products have same description

    # Тестирование отсутствующего поля описания
    with pytest.raises(ValueError):
        count_unique_offers({"catalogs": [], "offers": [], "target_shops_coords": []})

    # Тестирование пустых предложений
    empty_data: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    assert count_unique_offers(dict(empty_data)) == (0, 0)

    # Тестирование уникальных описаний
    unique_data: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    total, unique = count_unique_offers(dict(unique_data))
    assert total == 0
    assert unique == 0


def test_create_test_json(sample_data: CatalogData) -> None:
    result = create_test_json(sample_data)

    assert len(result["catalogs"]) == len(sample_data["catalogs"])
    for catalog in result["catalogs"]:
        assert len(catalog["offers"]) == 1

    assert "target_shops_coords" in result
    assert len(result["offers"]) == len(result["catalogs"])

    # Тестирование пустых данных
    empty_data: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    empty_result = create_test_json(empty_data)
    assert empty_result == {"catalogs": [], "offers": [], "target_shops_coords": []}

    # Тестирование отсутствующих предложений
    no_offers: CatalogData = {"catalogs": [], "offers": [], "target_shops_coords": []}
    result = create_test_json(no_offers)
    assert result["catalogs"] == []
    assert result["offers"] == []


def test_analyze_price_differences(sample_data: CatalogData) -> None:
    diffs, count, total = analyze_price_differences(dict(sample_data))

    assert len(diffs) == 1
    assert diffs[0] == 50  # 150 - 100
    assert count == 1
    assert total == 1

    # Тестирование некорректных данных о ценах
    invalid_data: dict[str, Any] = {"offers": [{"description": "Test", "price_new": "invalid"}]}
    with pytest.raises(ValueError):
        analyze_price_differences(invalid_data)

    # Тестирование отсутствующего поля цены
    missing_price: dict[str, Any] = {"offers": [{"description": "Test"}]}
    with pytest.raises(ValueError):
        analyze_price_differences(missing_price)

    # Тестирование пустых предложений
    empty_data: dict[str, Any] = {}
    assert analyze_price_differences(empty_data) == ([], 0, 0)

    # Тестирование одинаковых цен
    same_price_data: dict[str, Any] = {
        "offers": [
            {"description": "Test", "price_new": 100},
            {"description": "Test", "price_new": 100},
        ]
    }
    diffs, count, total = analyze_price_differences(same_price_data)
    assert len(diffs) == 0
    assert count == 0
    assert total == 1

    # Тестирование отрицательных цен
    negative_price_data = {
        "offers": [
            {"description": "Test", "price_new": -100},
            {"description": "Test", "price_new": 100},
        ]
    }
    with pytest.raises(ValueError, match="Negative price value"):
        analyze_price_differences(negative_price_data)

    # Тестирование цен с плавающей точкой
    float_price_data = {
        "offers": [
            {"description": "Test", "price_new": 100.50},
            {"description": "Test", "price_new": 150.75},
        ]
    }
    diffs, count, total = analyze_price_differences(float_price_data)
    assert len(diffs) == 1
    assert diffs[0] == pytest.approx(50.25)
    assert count == 1
    assert total == 1
